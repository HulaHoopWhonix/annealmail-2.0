/*global Components: false */
/*jshint -W097 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


"use strict";

var EXPORTED_SYMBOLS = ["AnnealMailConfigBackup"];

Components.utils.import("resource://annealmail/log.jsm"); /* global AnnealMailLog: false */
Components.utils.import("resource://annealmail/rules.jsm"); /* global AnnealMailRules: false */
Components.utils.import("resource://annealmail/files.jsm"); /* global AnnealMailFiles: false */
Components.utils.import("resource://annealmail/prefs.jsm"); /* global AnnealMailPrefs: false */

const Cc = Components.classes;
const Ci = Components.interfaces;

const TYPE_BOOL = 1;
const TYPE_CHAR = 2;
const TYPE_INT = 3;

const IdentityPref = {
  enablePgp: TYPE_BOOL,
  pgpkeyId: TYPE_CHAR,
  pgpKeyMode: TYPE_INT,
  pgpSignPlain: TYPE_BOOL,
  pgpSignEncrypted: TYPE_BOOL,
  defaultSigningPolicy: TYPE_INT,
  defaultEncryptionPolicy: TYPE_INT,
  openPgpHeaderMode: TYPE_INT,
  openPgpUrlName: TYPE_CHAR,
  pgpMimeMode: TYPE_BOOL,
  attachPgpKey: TYPE_BOOL,
  autoEncryptDrafts: TYPE_BOOL
};

var AnnealMailConfigBackup = {

  getAccountManager: function() {
    let amService = Cc["@mozilla.org/messenger/account-manager;1"].getService(Ci.nsIMsgAccountManager);
    return amService;
  },

  /**
   * itereate over all identities and execute a callback function for each found element
   *
   * @param callbackFunc  function  - the callback for each identity
   *                  The function takes the identity as 1st argument, i.e.
   *                    callbackFunc(nsIMsgIdentity)
   * @return  - undefined
   */
  forAllIdentitites: function(callbackFunc) {

    let amService = this.getAccountManager();

    amService.LoadAccounts(); // ensure accounts are really loaded
    let a = amService.allIdentities;
    for (let i = 0; i < a.length; i++) {
      let id = a.queryElementAt(i, Ci.nsIMsgIdentity);
      try {
        callbackFunc(id);
      }
      catch (ex) {
        AnnealMailLog.DEBUG("configBackup.jsm: forAllIdentitites: exception " + ex.toString() + "\n");
      }
    }
  },

  /**
   * backup AnnealMail preferences to a file
   *
   * @param outputFile  nsIFile - handle to file to be saved
   *
   * @return 0: success, other values: failure
   */
  backupPrefs: function(outputFile) {
    AnnealMailLog.DEBUG("configBackup.jsm: backupPrefs\n");

    // user preference
    let prefObj = {
      annealmailPrefs: AnnealMailPrefs.getAllPrefs(),
      mailIdentities: {}
    };

    function getIdentityPrefs(identity) {

      if (!identity.getBoolAttribute("enablePgp")) return; // do nothing if AnnealMail disabled

      let keyObj = {
        emailAddress: identity.email.toLowerCase(),
        identityName: identity.identityName
      };

      for (let pref in IdentityPref) {
        switch (IdentityPref[pref]) {
          case TYPE_BOOL:
            keyObj[pref] = identity.getBoolAttribute(pref);
            break;
          case TYPE_INT:
            keyObj[pref] = identity.getIntAttribute(pref);
            break;
          case TYPE_CHAR:
            keyObj[pref] = identity.getCharAttribute(pref);
            break;
        }
      }

      prefObj.mailIdentities[identity.key] = keyObj;
    }

    this.forAllIdentitites(getIdentityPrefs);

    // per-recipient rules (aka pgpRules.xml)
    var rulesFile = AnnealMailRules.getRulesFile();
    if (rulesFile.exists()) {
      prefObj.rules = AnnealMailFiles.readFile(rulesFile);
    }

    // serialize everything to UTF-8 encoded JSON.
    var strm = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
    var nativeJSON = Cc["@mozilla.org/dom/json;1"].createInstance(Ci.nsIJSON);

    try {
      strm.init(outputFile, -1, -1, 0);
      nativeJSON.encodeToStream(strm, "UTF-8", false, prefObj);
      strm.close();
    }
    catch (ex) {
      return -1;
    }

    return 0;
  },

  /**
   * Restore AnnealMail preferences from a file as generated by backpPrefs()
   *
   * @param inputFile  nsIFile - handle to file to be saved
   *
   * @return Object: {
   *     retVal:       Number - 0: success, other values: failure
   *     unmatchedIds: Array (String): keys of identities
   *   }
   */
  restorePrefs: function(inputFile) {
    AnnealMailLog.DEBUG("configBackup.jsm: restorePrefs\n");
    var prefObj;
    var returnObj = {
      retVal: -1,
      unmatchedIds: []
    };

    function setIdentityPref(identity) {
      for (let k in prefObj.mailIdentities) {
        if (prefObj.mailIdentities[k].emailAddress === identity.email.toLowerCase()) {
          AnnealMailLog.DEBUG("configBackup.jsm: setIdentityPref: restoring values for " + identity.email + "\n");
          prefObj.mailIdentities[k].foundMatchingEmail = true;
          let keyObj = prefObj.mailIdentities[k];
          for (let pref in IdentityPref) {
            switch (IdentityPref[pref]) {
              case TYPE_BOOL:
                identity.setBoolAttribute(pref, keyObj[pref]);
                break;
              case TYPE_INT:
                identity.setIntAttribute(pref, keyObj[pref]);
                break;
              case TYPE_CHAR:
                identity.setCharAttribute(pref, keyObj[pref]);
                break;
            }
          }
          return;
        }
      }

      AnnealMailLog.DEBUG("configBackup.jsm: setIdentityPref: no matching data for " + identity.email + "\n");
    }

    // Profile must be a single UTF-8 encoded JSON object.
    var strm = Cc["@mozilla.org/network/file-input-stream;1"].createInstance(Ci.nsIFileInputStream);
    var nativeJSON = Cc["@mozilla.org/dom/json;1"].createInstance(Ci.nsIJSON);

    try {
      strm.init(inputFile, -1, -1, 0);
      prefObj = nativeJSON.decodeFromStream(strm, "UTF-8", false);
      strm.close();

      var nsIPB = Ci.nsIPrefBranch;
      var branch = AnnealMailPrefs.getPrefBranch();

      // Set all options recorded in the JSON file.
      for (let name in prefObj.annealmailPrefs) {
        AnnealMailPrefs.setPref(name, prefObj.annealmailPrefs[name]);
      }

      this.forAllIdentitites(setIdentityPref);

      for (let i in prefObj.mailIdentities) {
        if (!("foundMatchingEmail" in prefObj.mailIdentities[i])) {
          returnObj.unmatchedIds.push(prefObj.mailIdentities[i].identityName);
        }
      }

      let am = this.getAccountManager();
      am.saveAccountInfo();
      AnnealMailPrefs.savePrefs();

      if ("rules" in prefObj) {
        AnnealMailRules.loadRulesFromString(prefObj.rules);
        AnnealMailRules.saveRulesFile();
      }

    }
    catch (ex) {
      AnnealMailLog.ERROR("configBackup.jsm: restorePrefs - exception " + ex.toString() + "\n");
      return returnObj;
    }

    returnObj.retVal = 0;
    return returnObj;
  }

};
